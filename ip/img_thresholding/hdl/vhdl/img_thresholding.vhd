-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_thresholding is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of img_thresholding is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "img_thresholding_img_thresholding,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.111000,HLS_SYN_LAT=307203,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=187,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_4B000 : STD_LOGIC_VECTOR (18 downto 0) := "1001011000000000000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln18_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln18_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln18_reg_189_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_119 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_1_fu_130_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal valOut_keep_V_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal valOut_strb_V_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal valOut_user_V_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal valOut_last_V_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_id_V_reg_213 : STD_LOGIC_VECTOR (4 downto 0);
    signal valOut_dest_V_reg_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal valOut_data_V_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_data_V_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_outStream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_inStream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_TVALID_int_regslice : STD_LOGIC;
    signal inStream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_inStream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_inStream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_inStream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_inStream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStream_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inStream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStream_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_inStream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStream_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inStream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal inStream_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_inStream_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inStream_V_dest_V_U_ack_in : STD_LOGIC;
    signal outStream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_TVALID_int_regslice : STD_LOGIC;
    signal outStream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outStream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outStream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outStream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outStream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outStream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outStream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outStream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outStream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outStream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outStream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outStream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outStream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outStream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outStream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outStream_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outStream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outStream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outStream_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outStream_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component img_thresholding_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component img_thresholding_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    CTRL_BUS_s_axi_U : component img_thresholding_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_inStream_V_data_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TDATA,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_data_V_U_ack_in,
        data_out => inStream_TDATA_int_regslice,
        vld_out => inStream_TVALID_int_regslice,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_data_V_U_apdone_blk);

    regslice_both_inStream_V_keep_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TKEEP,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_keep_V_U_ack_in,
        data_out => inStream_TKEEP_int_regslice,
        vld_out => regslice_both_inStream_V_keep_V_U_vld_out,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_keep_V_U_apdone_blk);

    regslice_both_inStream_V_strb_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TSTRB,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_strb_V_U_ack_in,
        data_out => inStream_TSTRB_int_regslice,
        vld_out => regslice_both_inStream_V_strb_V_U_vld_out,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_strb_V_U_apdone_blk);

    regslice_both_inStream_V_user_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TUSER,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_user_V_U_ack_in,
        data_out => inStream_TUSER_int_regslice,
        vld_out => regslice_both_inStream_V_user_V_U_vld_out,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_user_V_U_apdone_blk);

    regslice_both_inStream_V_last_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TLAST,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_last_V_U_ack_in,
        data_out => inStream_TLAST_int_regslice,
        vld_out => regslice_both_inStream_V_last_V_U_vld_out,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_last_V_U_apdone_blk);

    regslice_both_inStream_V_id_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TID,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_id_V_U_ack_in,
        data_out => inStream_TID_int_regslice,
        vld_out => regslice_both_inStream_V_id_V_U_vld_out,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_id_V_U_apdone_blk);

    regslice_both_inStream_V_dest_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inStream_TDEST,
        vld_in => inStream_TVALID,
        ack_in => regslice_both_inStream_V_dest_V_U_ack_in,
        data_out => inStream_TDEST_int_regslice,
        vld_out => regslice_both_inStream_V_dest_V_U_vld_out,
        ack_out => inStream_TREADY_int_regslice,
        apdone_blk => regslice_both_inStream_V_dest_V_U_apdone_blk);

    regslice_both_outStream_V_data_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => outStream_TDATA_int_regslice,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => outStream_TREADY_int_regslice,
        data_out => outStream_TDATA,
        vld_out => regslice_both_outStream_V_data_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_data_V_U_apdone_blk);

    regslice_both_outStream_V_keep_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_keep_V_reg_193,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => regslice_both_outStream_V_keep_V_U_ack_in_dummy,
        data_out => outStream_TKEEP,
        vld_out => regslice_both_outStream_V_keep_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_keep_V_U_apdone_blk);

    regslice_both_outStream_V_strb_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_strb_V_reg_198,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => regslice_both_outStream_V_strb_V_U_ack_in_dummy,
        data_out => outStream_TSTRB,
        vld_out => regslice_both_outStream_V_strb_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_strb_V_U_apdone_blk);

    regslice_both_outStream_V_user_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_user_V_reg_203,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => regslice_both_outStream_V_user_V_U_ack_in_dummy,
        data_out => outStream_TUSER,
        vld_out => regslice_both_outStream_V_user_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_user_V_U_apdone_blk);

    regslice_both_outStream_V_last_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_last_V_reg_208,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => regslice_both_outStream_V_last_V_U_ack_in_dummy,
        data_out => outStream_TLAST,
        vld_out => regslice_both_outStream_V_last_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_last_V_U_apdone_blk);

    regslice_both_outStream_V_id_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_id_V_reg_213,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => regslice_both_outStream_V_id_V_U_ack_in_dummy,
        data_out => outStream_TID,
        vld_out => regslice_both_outStream_V_id_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_id_V_U_apdone_blk);

    regslice_both_outStream_V_dest_V_U : component img_thresholding_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_dest_V_reg_218,
        vld_in => outStream_TVALID_int_regslice,
        ack_in => regslice_both_outStream_V_dest_V_U_ack_in_dummy,
        data_out => outStream_TDEST,
        vld_out => regslice_both_outStream_V_dest_V_U_vld_out,
        ack_out => outStream_TREADY,
        apdone_blk => regslice_both_outStream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_119 <= i_1_fu_130_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_119 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_189 <= icmp_ln18_fu_136_p2;
                icmp_ln18_reg_189_pp0_iter1_reg <= icmp_ln18_reg_189;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                valOut_data_V_reg_223 <= valOut_data_V_fu_170_p2;
                valOut_dest_V_reg_218 <= inStream_TDEST_int_regslice;
                valOut_id_V_reg_213 <= inStream_TID_int_regslice;
                valOut_keep_V_reg_193 <= inStream_TKEEP_int_regslice;
                valOut_last_V_reg_208 <= inStream_TLAST_int_regslice;
                valOut_strb_V_reg_198 <= inStream_TSTRB_int_regslice;
                valOut_user_V_reg_203 <= inStream_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln18_fu_136_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, regslice_both_outStream_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_outStream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_fu_136_p2, ap_enable_reg_pp0_iter1, icmp_ln18_reg_189, ap_enable_reg_pp0_iter2, icmp_ln18_reg_189_pp0_iter1_reg, inStream_TVALID_int_regslice, outStream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln18_reg_189_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (outStream_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln18_reg_189 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (outStream_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (inStream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_fu_136_p2, ap_enable_reg_pp0_iter1, icmp_ln18_reg_189, ap_enable_reg_pp0_iter2, icmp_ln18_reg_189_pp0_iter1_reg, ap_block_state3_io, ap_block_state4_io, inStream_TVALID_int_regslice, outStream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln18_reg_189_pp0_iter1_reg = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln18_reg_189 = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0)))) or ((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (inStream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln18_fu_136_p2, ap_enable_reg_pp0_iter1, icmp_ln18_reg_189, ap_enable_reg_pp0_iter2, icmp_ln18_reg_189_pp0_iter1_reg, ap_block_state3_io, ap_block_state4_io, inStream_TVALID_int_regslice, outStream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln18_reg_189_pp0_iter1_reg = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln18_reg_189 = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0)))) or ((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (inStream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln18_fu_136_p2, inStream_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (inStream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln18_reg_189, outStream_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((icmp_ln18_reg_189 = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln18_reg_189, outStream_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln18_reg_189 = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(icmp_ln18_reg_189_pp0_iter1_reg, outStream_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((icmp_ln18_reg_189_pp0_iter1_reg = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(icmp_ln18_reg_189_pp0_iter1_reg, outStream_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln18_reg_189_pp0_iter1_reg = ap_const_lv1_0) and (outStream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln18_fu_136_p2)
    begin
        if ((icmp_ln18_fu_136_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_outStream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_outStream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_outStream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_outStream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_1_fu_130_p2 <= std_logic_vector(unsigned(i_reg_119) + unsigned(ap_const_lv19_1));
    icmp_ln18_fu_136_p2 <= "1" when (i_reg_119 = ap_const_lv19_4B000) else "0";

    inStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln18_fu_136_p2, inStream_TVALID_int_regslice)
    begin
        if (((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_TDATA_blk_n <= inStream_TVALID_int_regslice;
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= regslice_both_inStream_V_data_V_U_ack_in;

    inStream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln18_fu_136_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln18_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            inStream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    outStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_189, ap_enable_reg_pp0_iter2, icmp_ln18_reg_189_pp0_iter1_reg, outStream_TREADY_int_regslice)
    begin
        if ((((icmp_ln18_reg_189_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln18_reg_189 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outStream_TDATA_blk_n <= outStream_TREADY_int_regslice;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDATA_int_regslice <= 
        ap_const_lv32_FF when (valOut_data_V_reg_223(0) = '1') else 
        ap_const_lv32_0;
    outStream_TVALID <= regslice_both_outStream_V_data_V_U_vld_out;

    outStream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_189, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln18_reg_189 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            outStream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    valOut_data_V_fu_170_p2 <= "1" when (signed(inStream_TDATA_int_regslice) > signed(ap_const_lv32_79)) else "0";
end behav;
